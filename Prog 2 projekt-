#include "header.h"

Clan* clanovi = NULL;
size_t broj_clanova = 0;
const char* DATOTEKA = "clanovi.dat";

void ocisti_ulazni_buffer(void) {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

int ucitaj_clanove() {
    FILE* dat = fopen(DATOTEKA, "rb");
    if (!dat) return 0;
    fseek(dat, 0, SEEK_END);
    long velicina = ftell(dat);
    rewind(dat);
    broj_clanova = velicina / sizeof(Clan);
    if (broj_clanova > 0) {
        clanovi = malloc(broj_clanova * sizeof(Clan));
        if (!clanovi) {
            fclose(dat);
            return -1;
        }
        fread(clanovi, sizeof(Clan), broj_clanova, dat);
    }
    fclose(dat);
    return 0;
}

int spremi_clanove() {
    FILE* dat = fopen(DATOTEKA, "wb");
    if (!dat) return -1;
    fwrite(clanovi, sizeof(Clan), broj_clanova, dat);
    fclose(dat);
    return 0;
}
int azuriraj_clana() {
    int id;
    printf("Unesite ID člana za ažuriranje: ");
    if (scanf("%d", &id) != 1) {
        printf("Neispravan ID!\n");
        ocisti_ulazni_buffer();
        return -1;
    }
    OCISTI_BUFFER();

    for (size_t i = 0; i < broj_clanova; i++) {
        if (clanovi[i].id == id) {
            printf("Novo ime (%s): ", clanovi[i].ime);
            fgets(clanovi[i].ime, 50, stdin);
            clanovi[i].ime[strcspn(clanovi[i].ime, "\n")] = '\0';

            printf("Novo prezime (%s): ", clanovi[i].prezime);
            fgets(clanovi[i].prezime, 50, stdin);
            clanovi[i].prezime[strcspn(clanovi[i].prezime, "\n")] = '\0';

            printf("Nove godine (%d): ", clanovi[i].godine);
            if (scanf("%d", &clanovi[i].godine) != 1) {
                printf("Neispravan unos!\n");
                ocisti_ulazni_buffer();
                return -1;
            }
            ocisti_ulazni_buffer();

            printf("Nova visina (%.1f): ", clanovi[i].visina);
            if (scanf("%f", &clanovi[i].visina) != 1) {
                printf("Neispravan unos!\n");
                ocisti_ulazni_buffer();
                return -1;
            }
            ocisti_ulazni_buffer();

            printf("Nova težina (%.1f): ", clanovi[i].tezina);
            if (scanf("%f", &clanovi[i].tezina) != 1) {
                printf("Neispravan unos!\n");
                ocisti_ulazni_buffer();
                return -1;
            }
            OCISTI_BUFFER();

            printf("Član ažuriran.\n");
            return 0;
        }
    }
    printf("Član nije pronađen!\n");
    return -1;
}
int obrisi_datoteku(const char* ime) {
    if (remove(ime) == 0) {
        printf("Datoteka uspješno obrisana.\n");
        return 0;
    } else {
        perror("Greška pri brisanju");
        return -1;
    }
}

int obrisi_clana() {
    int id;
    printf("Unesite ID člana za brisanje: ");
    if (scanf("%d", &id) != 1) {
        printf("Neispravan ID!\n");
        ocisti_ulazni_buffer();
        return -1;
    }
    ocisti_ulazni_buffer();

    for (size_t i = 0; i < broj_clanova; i++) {
        if (clanovi[i].id == id) {
            memmove(&clanovi[i], &clanovi[i+1], (broj_clanova - i - 1) * sizeof(Clan));
            broj_clanova--;
            Clan* temp = realloc(clanovi, broj_clanova * sizeof(Clan));
            if (temp || broj_clanova == 0) {
                clanovi = temp;
            }
            printf("Član obrisan.\n");
            return 0;
        }
    }
    printf("Član nije pronađen!\n");
    return -1;
}
int dodaj_clana() {
    Clan clan;
    printf("Unesite ID: ");
    if (scanf("%d", &clan.id) != 1) {
        printf("Neispravan ID!\n");
        ocisti_ulazni_buffer();
        return -1;
    }
    ocisti_ulazni_buffer();

    for (size_t i = 0; i < broj_clanova; i++) {
        if (clanovi[i].id == clan.id) {
            printf("Greška: ID već postoji!\n");
            return -1;
        }
    }

    printf("Unesite ime: ");
    fgets(clan.ime, 50, stdin);
    clan.ime[strcspn(clan.ime, "\n")] = '\0';

    printf("Unesite prezime: ");
    fgets(clan.prezime, 50, stdin);
    clan.prezime[strcspn(clan.prezime, "\n")] = '\0';

    printf("Unesite godine: ");
    if (scanf("%d", &clan.godine) != 1) {
        printf("Neispravan unos!\n");
        ocisti_ulazni_buffer();
        return -1;
    }
    ocisti_ulazni_buffer();

    printf("Unesite visinu (cm): ");
    if (scanf("%f", &clan.visina) != 1) {
        printf("Neispravan unos!\n");
        ocisti_ulazni_buffer();
        return -1;
    }
    ocisti_ulazni_buffer();

    printf("Unesite težinu (kg): ");
    if (scanf("%f", &clan.tezina) != 1) {
        printf("Neispravan unos!\n");
        ocisti_ulazni_buffer();
        return -1;
    }
    ocisti_ulazni_buffer();

    Clan* temp = realloc(clanovi, (broj_clanova + 1) * sizeof(Clan));
    if (!temp) return -1;
    clanovi = temp;
    clanovi[broj_clanova++] = clan;
    return 0;
}

int usporedi_clanove_po_id(const void* a, const void* b) {
    return ((Clan*)a)->id - ((Clan*)b)->id;
}

int pregled_clanova() {
    if (broj_clanova == 0) {
        printf("Nema članova u evidenciji.\n");
        return 0;
    }
     qsort(clanovi, broj_clanova, sizeof(Clan), usporedi_clanove_po_id);
     
    printf("\nPopis članova:\n");
    for (size_t i = 0; i < broj_clanova; i++) {
        printf("ID: %d | Ime: %s | Prezime: %s | Godine: %d | Visina: %.1f | Težina: %.1f\n",
               clanovi[i].id, clanovi[i].ime, clanovi[i].prezime, clanovi[i].godine, clanovi[i].visina, clanovi[i].tezina);
    }
    return 0;
}

int usporedi_prezime(const void *a, const void *b) {
    const Clan *clanA = *(const Clan **)a;
    const Clan *clanB = *(const Clan **)b;
    return strcmp(clanA->prezime, clanB->prezime);
}

int usporedi_prezime_s_kljucem(const void *kljuc, const void *element) {
    const char *trazeno_prezime = (const char *)kljuc;
    const Clan *clan = *(const Clan **)element;
    return strcmp(trazeno_prezime, clan->prezime);
}

int pretrazi_po_prezimenu() {
    if (broj_clanova == 0) {
        printf("Nema članova za pretragu.\n");
        return 0;
    }
    
    char trazeno_prezime[50];
    printf("Unesite prezime za pretragu: ");
    fgets(trazeno_prezime, 50, stdin);
    trazeno_prezime[strcspn(trazeno_prezime, "\n")] = '\0';

    Clan **temp = malloc(broj_clanova * sizeof(Clan *));
    if (!temp) {
        perror("Greška pri alokaciji");
        return -1;
    }
    for (size_t i = 0; i < broj_clanova; i++) {
        temp[i] = &clanovi[i];
    }
    qsort(temp, broj_clanova, sizeof(Clan *), usporedi_prezime);
    
    Clan **rezultat = bsearch(trazeno_prezime, temp, broj_clanova, sizeof(Clan *), usporedi_prezime_s_kljucem);

    if (rezultat) {
        printf("\nPronađeni članovi:\n");
        size_t indeks = rezultat - temp;
        while (indeks > 0 && strcmp(temp[indeks-1]->prezime, trazeno_prezime) == 0) {
            indeks--;
        }
        for (size_t i = indeks; i < broj_clanova && strcmp(temp[i]->prezime, trazeno_prezime) == 0; i++) {
            printf("ID: %d | Ime: %s | Prezime: %s | Godine: %d | Visina: %.1f | Težina: %.1f\n",
                   temp[i]->id, temp[i]->ime, temp[i]->prezime, temp[i]->godine, temp[i]->visina, temp[i]->tezina);
        }
    } else {
        printf("Nema članova s prezimenom '%s'.\n", trazeno_prezime);
    }
    free(temp);
    return 0;
}

int prikazi_izbornik() {
    if (ucitaj_clanove() != 0) {
        printf("Greška pri učitavanju članova!\n");
    }
    int izbor;
    do {
        printf("\n=== FITNESS CENTAR ===\n");
        printf("%d. Dodaj člana\n", DODAJ_CLANA);
        printf("%d. Pregled članova\n", PREGLED_CLANOVA);
        printf("%d. Ažuriraj člana\n", AZURIRAJ_CLANA);
        printf("%d. Obriši člana\n", OBRISI_CLANA);
        printf("%d. Pretraži po prezimenu\n", PRETRAZI_PREZIME);
        printf("%d. Obriši datoteku\n", OBRISI_DATOTEKU);
        printf("%d. Izlaz\n", IZLAZ);
        printf("Odabir: ");
        if (scanf("%d", &izbor) != 1) {
            printf("Nevažeći unos!\n");
            ocisti_ulazni_buffer();
            continue;
        }
        ocisti_ulazni_buffer();
        switch(izbor) {
            case DODAJ_CLANA: dodaj_clana(); break;
            case PREGLED_CLANOVA: pregled_clanova(); break;
            case AZURIRAJ_CLANA: azuriraj_clana(); break;
            case OBRISI_CLANA: obrisi_clana(); break;
            case PRETRAZI_PREZIME: pretrazi_po_prezimenu(); break;
            case OBRISI_DATOTEKU: {
            char ime[256];
            printf("Unesite ime datoteke za brisanje: ");
            fgets(ime, 256, stdin);
            ime[strcspn(ime, "\n")] = '\0';
            obrisi_datoteku(ime);
            break;
        }   
            case IZLAZ: spremi_clanove(); free(clanovi); clanovi = NULL; break;
            default: printf("Nevažeći odabir!\n");
        }
    } while(izbor != IZLAZ);
    return 0;
}
